//
//  DVTLoger.swift
//
//
//  Created by darvin on 2018/1/3.
//

/*

 MIT License

 Copyright (c) 2022 darvin http://blog.tcoding.cn

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.

 */

import Foundation
import os
import Zip

public class Loger {
    public enum Level: Int, Comparable {
        public typealias RawValue = Int

        case all = -1
        case debug = 1 // "üü¢"
        case info = 2 // "‚ö™"
        case warning = 3 // "üü°"
        case error = 4 // "üî¥"
        case off = 999

        public static func < (lhs: Level, rhs: Level) -> Bool {
            return lhs.rawValue < rhs.rawValue
        }

        public static func <= (lhs: Level, rhs: Level) -> Bool {
            return lhs.rawValue >= rhs.rawValue
        }

        public static func > (lhs: Level, rhs: Level) -> Bool {
            return lhs.rawValue > rhs.rawValue
        }

        public static func == (lhs: Level, rhs: Level) -> Bool {
            return lhs.rawValue == rhs.rawValue
        }

        public var name: String {
            switch self {
                case .all: return "All"
                case .debug: return "Debug"
                case .info: return "Info"
                case .warning: return "Warning"
                case .error: return "Error"
                case .off: return "Off"
            }
        }

        public static var alls: [Level] = [.all, .debug, .info, .warning, .error, .off]
    }

    fileprivate let dateFormatter = DateFormatter()
    fileprivate let dateShortFormatter = DateFormatter()

    /// Êñá‰ª∂ÂêçÂ≠óÊ†ºÂºèÔºåÊîØÊåÅY(year)„ÄÅWY(weekOfYear)„ÄÅM(month)„ÄÅD(day) ‰æãÂ¶ÇÔºå‰ª•2018/3/21‰∏∫‰æã "Y-WY"=>2018Y-12WY "Y-M-D"=>2018Y-3M-21D "Y-M"=>2018Y-3MÔºåÈÄöËøáËøôÁ±ªÁöÑÁªÑÂêàÂèØ‰ª•ÊûÑÊàê‰∏Ä‰∏™Êó•ÂøóÊñá‰ª∂‰øùÂ≠ò‰∏ÄÂ§©„ÄÅ‰∏ÄÂë®„ÄÅ‰∏Ä‰∏™Êúà„ÄÅ‰∏ÄÂπ¥Á≠âÊñπÂºè„ÄÇÂª∫ËÆÆ‰ΩøÁî®"Y-WY" or "Y-M"Ôºå‰∏ÄÂÆöË¶ÅÁî®"-"ÈöîÂºÄ
    public var fileFormatter = "Y-WY"
    /// ÊòØÂê¶ÊâìÂç∞Êó∂Èó¥Êà≥
    public var isShowLongTime = true

    /// ÊòØÂê¶ÊâìÂç∞Êó•ÂøóÁ≠âÁ∫ß
    public var isShowLevel = true
    /// ÊòØÂê¶ÊâìÂç∞Á∫øÁ®ã
    public var isShowThread = true

    /// ÊòØÂê¶ÊâìÂç∞Ë∞ÉÁî®ÊâÄÂú®ÁöÑÂáΩÊï∞ÂêçÂ≠ó
    public var isShowFunctionName = true

    /// ÊòØÂê¶ÊâìÂç∞Ë∞ÉÁî®ÊâÄÂú®ÁöÑË°åÊï∞
    public var isShowLineNumber = true

    /// ÊòØÂê¶ÊâìÂç∞Êñá‰ª∂Âêç
    public var isShowFileName = true

    /// ÊòØÂê¶ËæìÂá∫Âà∞ÊéßÂà∂Âè∞
    public var toConsole = false

    public var logLevel: Level = .all

    /// ÂÜôÂÖ•Êñá‰ª∂ÁöÑÊó•ÂøóÁ≠âÁ∫ß
    public var toFileLevel: Level = .warning

    fileprivate var _logerName: String?
    public var logerName: String {
        self._logerName ?? Bundle.main.bundleIdentifier?.components(separatedBy: ".").last?.capitalized ?? "Default"
    }

    fileprivate var _logDirectory: String?
    fileprivate var logDirectory: String {
        (self._logDirectory ?? self.logerName) + "/"
    }

    public convenience init(_ logDirectory: String = "", logerName: String) {
        self.init(logerName)
        self._logDirectory = logDirectory
    }

    public required init(_ name: String? = nil) {
        self.dateFormatter.locale = Locale.current
        self.dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss.SSS"
        self.dateShortFormatter.locale = Locale.current
        self.dateShortFormatter.dateFormat = "HH:mm:ss.SSS"
        self._logerName = name
    }
}

extension Loger {
    /// ÈÄöËøáÊó•ÂøóÁ≠âÁ∫ßËé∑ÂèñÂΩìÂâçÊó•ÂøóÊñá‰ª∂ÁöÑË∑ØÂæÑ
    /// - Parameter level: Êó•ÂøóÁ≠âÁ∫ß
    /// - Returns: Êñá‰ª∂Ë∑ØÂæÑ
    public func getCurrentLogFilePath(_ level: Level) -> String {
        let fileName = selfLoger.returnFileName(level)
        let logFilePath = self.getLogDirectory() + fileName
        if !FileManager.default.fileExists(atPath: logFilePath) {
            FileManager.default.createFile(atPath: logFilePath, contents: nil, attributes: nil)
        }
        return logFilePath
    }

    /// Ëé∑ÂèñÊó•ÂøóÊñá‰ª∂Â§πÁöÑË∑ØÂæÑÔºåÊ≤°ÊúâËØ•Êñá‰ª∂Â§πÂ∞±ÂàõÂª∫
    /// - Returns: Êó•ÂøóÊñá‰ª∂Â§πÁöÑË∑ØÂæÑ
    public func getLogDirectory() -> String {
        let logDirectoryPath = Self.getLogDirectory() + "/" + self.logDirectory
        if !FileManager.default.fileExists(atPath: logDirectoryPath) {
            try? FileManager.default.createDirectory(atPath: logDirectoryPath, withIntermediateDirectories: true, attributes: nil)
        }
        return logDirectoryPath
    }

    /// Ëé∑ÂèñÊâÄÊúâÊó•ÂøóÊñá‰ª∂ÁöÑË∑ØÂæÑ
    /// - Returns: ÊâÄÊúâÊó•ÂøóÊñá‰ª∂ÁöÑË∑ØÂæÑ
    public func getLogFilesPath() -> [String] {
        var filesPath = [String]()
        do {
            filesPath = try FileManager.default.contentsOfDirectory(atPath: self.getLogDirectory())
        } catch {}
        return filesPath.compactMap({ self.getLogDirectory() + "/\($0)" })
    }

    /// Ëé∑ÂèñÊó•ÂøóÊñá‰ª∂Â§πÁöÑË∑ØÂæÑÔºåÊ≤°ÊúâËØ•Êñá‰ª∂Â§πÂ∞±ÂàõÂª∫
    /// - Returns: Êó•ÂøóÊñá‰ª∂Â§πÁöÑË∑ØÂæÑ
    public static func getLogDirectory() -> String {
        let logDirectoryPath = NSHomeDirectory() + "/Documents/DVTLoger"
        if !FileManager.default.fileExists(atPath: logDirectoryPath) {
            try? FileManager.default.createDirectory(atPath: logDirectoryPath, withIntermediateDirectories: true, attributes: nil)
        }
        return logDirectoryPath
    }

    /// Ëé∑ÂèñÊâÄÊúâÊó•ÂøóÊñá‰ª∂ÁöÑË∑ØÂæÑ
    /// - Returns: ÊâÄÊúâÊó•ÂøóÊñá‰ª∂ÁöÑË∑ØÂæÑ
    public static func getLogFilesPath() -> [String] {
        var filesPath = [String]()
        do {
            filesPath = try FileManager.default.contentsOfDirectory(atPath: self.getLogDirectory())
        } catch {}
        return filesPath.compactMap({ self.getLogDirectory() + "/\($0)" })
    }

    /// Ê∏ÖÁêÜÊó•ÂøóÊñá‰ª∂
    /// - Returns: Êìç‰ΩúÁªìÊûú
    @discardableResult public func cleanLogFiles() -> Bool {
        self.getLogFilesPath().forEach { path in
            do { try FileManager.default.removeItem(atPath: self.getLogDirectory() + "/" + path) } catch {}
        }
        return self.getLogFilesPath().isEmpty
    }

    /// Ê∏ÖÁêÜÊâÄÊúâÊó•ÂøóÊñá‰ª∂
    public static func cleanAll() {
        do { try FileManager.default.removeItem(atPath: self.getLogDirectory()) } catch {}
    }

    fileprivate func dvt_printToConsole(_ string: String) {
        if #available(iOS 14.0, macOS 11.0,*) {
            if let bundleIdentifier = Bundle.main.bundleIdentifier {
                let logger = Logger(subsystem: bundleIdentifier, category: "\(self.logerName)")
                logger.log("\(string, privacy: .public)")
            }
        } else {
            os_log("%{public}@: %{public}@", log: .default, type: .info, "\(self.logerName)", string)
        }
    }

    fileprivate func printToFile(_ level: Level, log string: String) {
        if self.toFileLevel > level {
            return
        }
        let logFilePath = self.getCurrentLogFilePath(level)
        if FileManager.default.fileExists(atPath: logFilePath) {
            let writeHandler = FileHandle(forWritingAtPath: logFilePath)
            writeHandler?.seekToEndOfFile()
            if let data = ("\n" + string).data(using: .utf8) {
                writeHandler?.write(data)
            }
            writeHandler?.closeFile()
        } else {
            FileManager.default.createFile(atPath: logFilePath, contents: string.data(using: .utf8), attributes: nil)
        }
    }

    fileprivate func returnFileName(_ level: Level) -> String {
        var fileNameString = ""
        switch level {
            case .info:
                fileNameString = "info"
            case .debug:
                fileNameString = "debug"
            case .warning:
                fileNameString = "warning"
            case .error:
                fileNameString = "error"
            default:
                break
        }
        let dateComponents = Calendar.current.dateComponents(Set<Calendar.Component>.init(arrayLiteral: .year, .month, .day, .weekOfYear), from: Date())
        let fileFormatters = self.fileFormatter.components(separatedBy: "-")
        fileFormatters.forEach { string in
            switch string {
                case "D":
                    fileNameString += "-\(dateComponents.day!)"
                case "WY":
                    fileNameString += "-\(dateComponents.weekOfYear!)"
                case "M":
                    fileNameString += "-\(dateComponents.month!)"
                case "Y":
                    fileNameString += "-\(dateComponents.year!)"
                default:
                    break
            }
        }
        fileNameString += ".log"
        return fileNameString
    }
}

extension Loger {
    /// ÊâìÂç∞Êó•Âøó
    /// - Parameters:
    ///   - level: Êó•ÂøóÁ≠âÁ∫ß
    ///   - format: Ë¶ÅÊâìÂç∞ÁöÑÊï∞ÊçÆÁöÑÁªìÊûÑ
    ///   - args: Ë¶ÅÊâìÂç∞ÁöÑÊï∞ÊçÆÊï∞ÁªÑ
    /// - Returns: ÊâìÂç∞ÁöÑÂÜÖÂÆπ
    public func log(_ level: Level,
                    function: String = #function,
                    file: String = #file,
                    line: Int = #line,
                    values: Any...,
                    separator: String = " ") -> String {
        if self.logLevel > level {
            return ""
        }

        let dateTime = self.isShowLongTime ? "\(self.dateFormatter.string(from: Date()))" : "\(self.dateShortFormatter.string(from: Date()))"
        var levelString = ""
        switch level {
            case .debug:
                levelString += "üü¢"
            case .info:
                levelString += "‚ö™"
            case .warning:
                levelString += "üü°"
            case .error:
                levelString += "üî¥"
            default:
                break
        }
        levelString = self.isShowLevel ? levelString : ""

        var fileString = ""
        if self.isShowFileName {
            fileString += "[" + (file as NSString).lastPathComponent
            if self.isShowLineNumber {
                fileString += ":\(line)"
            }
            fileString += "]"
        }
        if fileString.isEmpty && self.isShowLineNumber {
            fileString = "line:\(line)"
        }
        let functionString = self.isShowFunctionName ? function : ""

        let threadId = String(unsafeBitCast(Thread.current, to: Int.self), radix: 16, uppercase: false)
        let isMain = self.isShowThread ? Thread.current.isMainThread ? "[Main]" : "[Global]<0x\(threadId)>" : ""
        let infoString = "\(levelString) \(fileString) \(isMain) \(functionString)".trimmingCharacters(in: CharacterSet(charactersIn: " "))

        var logString = ""
        values.forEach { tempValue in
            var tempLog = ""
            Swift.print(tempValue, terminator: separator, to: &tempLog)
            logString += tempLog
        }

        logString = infoString + (infoString.isEmpty ? "" : " => ") + logString

        if self.toConsole {
            self.dvt_printToConsole(logString)
        } else {
            Swift.print("\(dateTime) [\(self.logerName)] " + logString)
        }

        logString = "\(dateTime) [\(self.logerName)] " + logString
        self.printToFile(level, log: logString)
        return logString + "\n"
    }
}

extension Loger {
    @discardableResult public func info(function: String = #function,
                                        file: String = #file,
                                        line: Int = #line,
                                        _ values: Any...,
                                        separator: String = " ") -> String {
        return self.log(.info, function: function, file: file, line: line, values: values, separator: separator)
    }

    @discardableResult public func debug(function: String = #function,
                                         file: String = #file,
                                         line: Int = #line,
                                         _ values: Any...,
                                         separator: String = " ") -> String {
        return self.log(.debug, function: function, file: file, line: line, values: values, separator: separator)
    }

    @discardableResult public func warning(function: String = #function,
                                           file: String = #file,
                                           line: Int = #line,
                                           _ values: Any...,
                                           separator: String = " ") -> String {
        return self.log(.warning, function: function, file: file, line: line, values: values, separator: separator)
    }

    @discardableResult public func error(function: String = #function,
                                         file: String = #file,
                                         line: Int = #line,
                                         _ values: Any...,
                                         separator: String = " ") -> String {
        return self.log(.error, function: function, file: file, line: line, values: values, separator: separator)
    }
}

fileprivate let selfLoger = Loger()
extension Loger {
    public static var `default`: Loger = selfLoger

    @discardableResult public static func info(function: String = #function,
                                               file: String = #file,
                                               line: Int = #line,
                                               _ values: Any...,
                                               separator: String = " ") -> String {
        return selfLoger.log(.info, function: function, file: file, line: line, values: values, separator: separator)
    }

    @discardableResult public static func debug(function: String = #function,
                                                file: String = #file,
                                                line: Int = #line,
                                                _ values: Any...,
                                                separator: String = " ") -> String {
        return selfLoger.log(.debug, function: function, file: file, line: line, values: values, separator: separator)
    }

    @discardableResult public static func warning(function: String = #function,
                                                  file: String = #file,
                                                  line: Int = #line,
                                                  _ values: Any...,
                                                  separator: String = " ") -> String {
        return selfLoger.log(.warning, function: function, file: file, line: line, values: values, separator: separator)
    }

    @discardableResult public static func error(function: String = #function,
                                                file: String = #file,
                                                line: Int = #line,
                                                _ values: Any...,
                                                separator: String = " ") -> String {
        return selfLoger.log(.error, function: function, file: file, line: line, values: values, separator: separator)
    }
}

#if canImport(UIKit)
    import UIKit

    extension Loger {
        public func getLogerFileZip(_ completion: @escaping (_ progress: Double, _ path: String) -> Void) {
            let zipFilePath = self.getLogDirectory() + ".zip"
            try? FileManager.default.removeItem(atPath: zipFilePath)
            let paths = self.getLogFilesPath().compactMap { URL(fileURLWithPath: $0) }
            try? Zip.zipFiles(paths: paths, zipFilePath: URL(fileURLWithPath: zipFilePath), password: nil) { progress in
                completion(progress, zipFilePath)
            }
        }

        public func shareLoger(from vc: UIViewController?, completion: ((_ progress: Double, _ path: String) -> Void)? = nil) {
            self.getLogerFileZip { progress, path in
                completion?(progress, path)
                if progress == 1 {
                    let actVC = UIActivityViewController(activityItems: [URL(fileURLWithPath: path)], applicationActivities: nil)
                    vc?.present(actVC, animated: true, completion: nil)
                }
            }
        }

        public static func getLogerFileZip(_ completion: @escaping (_ error: Error?, _ path: String?) -> Void) {
            let zipFilePath = self.getLogDirectory() + ".zip"
            try? FileManager.default.removeItem(atPath: zipFilePath)
            let paths = self.getLogFilesPath().compactMap { URL(fileURLWithPath: $0) }
            do {
                try Zip.zipFiles(paths: paths, zipFilePath: URL(fileURLWithPath: zipFilePath), password: nil) { progress in
                    if progress == 1 {
                        completion(nil, zipFilePath)
                    }
                }
            } catch let error {
                completion(error, nil)
            }
        }

        public static func shareLoger(from vc: UIViewController?, completion: ((_ error: Error?, _ path: String?) -> Void)? = nil) {
            self.getLogerFileZip { error, path in
                completion?(error, path)
                if let tpath = path {
                    let actVC = UIActivityViewController(activityItems: [URL(fileURLWithPath: tpath)], applicationActivities: nil)
                    vc?.present(actVC, animated: true, completion: nil)
                }
            }
        }
    }
#endif
